package com.cccloud.blogs.config.security;import com.cccloud.blogs.commons.JsonMessage;import com.cccloud.blogs.commons.exceptions.BusinessException;import com.cccloud.blogs.config.i18n.I18nMessageSource;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.BeansException;import org.springframework.context.ApplicationContext;import org.springframework.context.ApplicationContextAware;import org.springframework.http.HttpStatus;import org.springframework.http.converter.HttpMessageNotReadableException;import org.springframework.security.access.AccessDeniedException;import org.springframework.security.authentication.InternalAuthenticationServiceException;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.validation.BindException;import org.springframework.validation.BindingResult;import org.springframework.validation.ObjectError;import org.springframework.web.bind.MethodArgumentNotValidException;import org.springframework.web.bind.annotation.ControllerAdvice;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.bind.annotation.ResponseBody;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.util.List;/** * 创建人：徐卫超 * 时间：2019/11/13 15:29 * 功能：通用的全局异常处理器 * 备注： */@ControllerAdvicepublic class GeneralExceptionHandler implements ApplicationContextAware {    private static final Logger logger = LoggerFactory.getLogger(GeneralExceptionHandler.class);    private I18nMessageSource i18nMessageSource;    //处理业务错误    @ResponseBody    @ExceptionHandler(value = {BusinessException.class})    public JsonMessage BusinessExceptionHandler(HttpServletRequest request, Exception exception) {        if (exception instanceof BusinessException) {            BusinessException businessException = (BusinessException) exception;            if (businessException.getCode() == 401) {                return JsonMessage.failed(exception.getMessage(), businessException.getCode(), null);            }        }        return JsonMessage.failed(i18nMessageSource.getMessage(exception));    }    //处理数据校验错误    @ResponseBody    @ExceptionHandler(value = {BindException.class, MethodArgumentNotValidException.class})    public JsonMessage validataExceptionHandler(HttpServletRequest request, Exception exception) {        if (exception instanceof BindException) {            BindException bindException = (BindException) exception;            List<ObjectError> errors = bindException.getAllErrors();            if (!errors.isEmpty()) {                return JsonMessage.failed(errors.get(0).getDefaultMessage());            }        } else if (exception instanceof MethodArgumentNotValidException) {            MethodArgumentNotValidException notValidException = (MethodArgumentNotValidException) exception;            BindingResult bindingResult = notValidException.getBindingResult();            ObjectError objectError = bindingResult.getAllErrors().get(0);            return JsonMessage.failed(objectError.getDefaultMessage());        }        return JsonMessage.failed(i18nMessageSource.getMessage(I18nMessageSource.VALIDATE_ERROR));    }    //处理访问异常    @ResponseBody    @ExceptionHandler(value = AccessDeniedException.class)    public JsonMessage accessDeniedExceptionHandler(Exception exception, HttpServletResponse response) {        if (exception instanceof AccessDeniedException) {            return JsonMessage.failed(exception.getMessage()).setCode(403);        }        response.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());        return JsonMessage.failed("未知异常");    }    //没有捕获的异常    @ResponseBody    @ExceptionHandler(value = UsernameNotFoundException.class)    public JsonMessage usernameNotFoundException(Exception exception, HttpServletResponse response) {        return JsonMessage.failed(exception.getMessage(), JsonMessage.NOT_AUTHEN, "");    }    @ResponseBody    @ExceptionHandler(value = {HttpMessageNotReadableException.class})    public JsonMessage HttpMessageNotReadableExceptionHandler(HttpServletRequest request, Exception exception) {        return JsonMessage.failed("解析HTTP参数错误");    }    @Override    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {        this.i18nMessageSource = applicationContext.getBean(I18nMessageSource.class);    }}