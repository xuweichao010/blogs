package com.cccloud.blogs.config.swagger;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.web.context.request.async.DeferredResult;import springfox.documentation.builders.ApiInfoBuilder;import springfox.documentation.builders.RequestHandlerSelectors;import springfox.documentation.service.ApiInfo;import springfox.documentation.service.Contact;import springfox.documentation.spi.DocumentationType;import springfox.documentation.spring.web.plugins.Docket;import springfox.documentation.swagger2.annotations.EnableSwagger2;/** * @author jack */@Configuration@EnableSwagger2public class SwaggerConfiguration {    @Bean    public SwaggerProperties swaggerProperties() {        return new SwaggerProperties();    }    @Bean    public Docket createRestApi() {        SwaggerProperties properties = swaggerProperties();        return new Docket(DocumentationType.SWAGGER_2)                .apiInfo(apiInfo(properties))                .genericModelSubstitutes(DeferredResult.class)                .useDefaultResponseMessages(false)                .forCodeGeneration(true)                .pathMapping(properties.getPathMapping())                .select()                .apis(RequestHandlerSelectors.basePackage(properties.getBasePackage()))                .build();    }    private ApiInfo apiInfo(SwaggerProperties properties) {        return new ApiInfoBuilder()                .title(properties.getApiTitle())                .description(properties.getApiDescription())                .termsOfServiceUrl(properties.getApiTermsOfServiceUrl())                .contact(new Contact(properties.getApiContactName(),                        properties.getApiContactURL(),                        properties.getApiContactEmail()))                .version(properties.getApiVersion())                .build();    }//    @Bean//    public ApiOperationBuilderPlugin apiDocPlugin() {//        return new ApiOperationBuilderPlugin();//    }//    @Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)//    public static class ApiOperationBuilderPlugin implements OperationBuilderPlugin {//        @Override//        public void apply(OperationContext context) {//            StringBuilder sb = new StringBuilder();//            List<ApiOperation> list = context.findAllAnnotations(ApiOperation.class);//            if (list.size() > 0) {//                sb.append(list.get(0).value());//                List<Privilege> privilegeList = context.findAllAnnotations(Privilege.class);//                if (privilegeList.size() > 0) {//                    sb.append(" 【 ");//                    Privilege privilege = privilegeList.get(0);//                    sb.append("授权范围：").append(joinAccessEnum(privilege.access()));//                    sb.append("授权代码：").append(privilege.value());//                    sb.append(" 】 ");//                }//            }//            context.operationBuilder().summary(sb.toString());//替换默认值//        }////        public String joinAccessEnum(AccessEnum[] accessEnumArr) {//            StringBuilder sb = new StringBuilder();//            for (AccessEnum accessEnum : accessEnumArr) {//                sb.append(accessEnum.code()).append(" | ");//            }//            return sb.substring(0, sb.length() - 2);//        }////        @Override//        public boolean supports(DocumentationType delimiter) {//            return true;//        } //   }}